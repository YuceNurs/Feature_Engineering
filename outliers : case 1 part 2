import pandas as pd
import seaborn as sns
import numpy as np
from matplotlib import pyplot as plt
#!pip install missingno
import missingno as msno
from datetime import date
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.neighbors import LocalOutlierFactor
from sklearn.preprocessing import MinMaxScaler, LabelEncoder, StandardScaler, RobustScaler

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.float_format', lambda x:'%.3f' %x)
pd.set_option('display.width',500)

def load_application_train():
    data = pd.read_csv("C:\Program Files\python\pplication_train.csv")
    return data

df = load_application_train()
df.head()
def load():
    data = pd.read_csv("C:\Program Files\python\itanic.csv")
    return data


df = load()
df.head()

sns.boxplot(x=df["Age"])
plt.show()

q1 =df["Age"].quantile(0.25)
q3 = df["Age"].quantile(0.75)
iqr =  q3 - q1
up = q3+ 1.5*iqr
low = q1- 1.5*iqr

outliers = df[(df["Age"] < low) | (df["Age"] > up)]
print(outliers)


def outlier_thresholds(dataframe, col_name, q1=0.25, q3=0.75):
    quartile1 = dataframe[col_name].quantile(q1)
    quartile3= dataframe[col_name].quantile(q3)
    interquantile_range = quartile3 - quartile1
    up_limit = quartile3 + 1.5*interquantile_range
    low_limit = quartile1 + 1.5*interquantile_range
    return low_limit, up_limit
outlier_thresholds(df, "Age")
print(outlier_thresholds(df, "Age"))

def check_outlier(dataframe, col_name):
    low_limit,up_limit = outlier_thresholds(dataframe, col_name)
    if dataframe [(dataframe[col_name]>up_limit)|(dataframe[col_name]<low_limit)].any(axis=None):
        return True
    else:
        return False
