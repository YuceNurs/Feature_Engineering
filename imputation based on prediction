#3.Yöntem :Tahmine dayalı atama işlemi

df=load()
cat_cols,num_cols,cat_but_car =grab_col_names(df)
num_cols=[col for col in num_cols if col not in "PassengerId"]
dff =pd.get_dummies(df[cat_cols+num_cols], drop_first = True)

dff.head()

scaler =MinMaxScaler()

dff= pd.DataFrame(scaler.fit_transform(dff),columns=dff.columns)
dff.head()

from sklearn.impute import KNNImputer

imputer = KNNImputer(n_neighbors=5)
dff=pd.DataFrame(imputer.fit_transform(dff), columns=dff.columns)
df.head()

#doldurulan yerleri oldu da görmek istersem // Hayat kurtarıcı
#standartize etmiştik geri alalım önce
dff =pd.DataFrame(scaler.inverse_transform(dff),columns=dff.columns)
df["age_imputed_knn"] = dff[["Age"]]
df.loc[df["Age"].isnull(), ["Age","age_imputed_knn"]]

#eksik değerleri analizlemek için

msno.bar(df)
plt.show()

msno.matrix(df)
plt.show()

msno.heatmap(df)
plt.show()

#eksik değerlerin bağımlı değişken ile analizi
missing_values_table(df, True)
na_cols= missing_values_table(df, True)

def missing_vs_target(dataframe, target, na_columns):
    temp_df=dataframe.copy()
    for col in na_columns:
        temp_df[col+'_NA_FLAG']=np.where(temp_df[col].isnull(),1,0)
        na_flags=temp_df.loc[:,temp_df.columns.str.contains("_NA_")].columns
    for col in na_flags:
        print(pd.DataFrame({"TARGET_MEAN": temp_df.groupby(col)[target].mean(),
                            "COUNT": temp_df.groupby(col)[target].count()}), end ="\n\n\n")

missing_vs_target(df, "Survived",na_cols)

